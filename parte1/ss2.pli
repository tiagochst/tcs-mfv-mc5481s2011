# SCHEDULING PROBLEM
#
# This problem finds a sort of the tasks
# that minimize the number of deadline not 
# accomplished
#
# Authors:
#   Murilo Fossa Vicentini
#   Tiago Chedraoui Silva


param n;
/* number of tasks*/

set T :=1..n;
/* n tasks */

set S within {i in T, j in T: i!=j}; 
/* order */

param t {T};
/* task's duration  */

param d {T};
/* task's deadline */

param M:=5000;
/* A large number*/

var x {i in T,j in T}, binary;
/* i preced j*/

s.t. loop{j in T, i in T:j!=i}: x[i,j]+x[j,i]=1;
/* Only one preciding other */

s.t. order{(i,j) in S}: x[i,j]=1;
/* order respected? */

var y{T}, binary;
/* task i is late? */

s.t. ending {j in T}:sum{i in T:i!=j} (x[i,j]*t[i]) <= d[j]-t[j]+ M*y[j];
/* If task is late y=1 */

minimize deadline_not_accomplished: sum {i in T} y[i];
/* Objective: minimize number of late tasks */

solve;
printf "%d",sum {i in T} y[i] > "ss2.out";
