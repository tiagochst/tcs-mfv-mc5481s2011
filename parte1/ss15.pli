# SCHEDULING PROBLEM
#
# This problem finds a sort of the tasks
# that minimize the number of deadline not 
# accomplished
#
# Authors:
#   Murilo Fossa Vicentini
#   Tiago Chedraoui Silva


param n;
/* number of projects*/


param m;
/* number of tasks and processor*/

set J :=1..n;
/*  projects */

set T :=1..m;
/*  tasks */

set P :=1..m;
/*  processors */

param t {j in J,i in T}; 
/* ith task's duration of project j  */

var x {j in J,i in J}, binary;
/* order of projects executions */

var end {j in J,i in T}, integer, >=0;
/* taks i of project j precedes task a of project j m*/

s.t. only_one_order{i in J,j in J: i!=j}: x[j,i]+x[i,j]=1;
/* if proj j is executed first then
   proj i then j should not preced i */

s.t. min{j in J,i in T}: 
   end[j,i] >= t[j,i];
/* task has a minimal time to complete */

s.t. time{j in J,i in T: i>1}: 
   end[j,i] >= t[j,i]+ end[j,i-1];
/* does my preceding task ended? */

s.t. time2{j in J,i in T: j>1}: 
   end[j,i] >= t[j,i]+ end[j-1,i];
/* does my preceding project ended? */

minimize time_accomplished: sum {j in J} end[j,m];
/* Objective: minimize ending of tasks */
